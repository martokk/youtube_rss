"""
This type stub file was generated by pyright.
"""

from typing import Any, Generic, List, Optional, Type, TypeVar
from sqlalchemy.sql.elements import BinaryExpression
from sqlmodel import SQLModel, Session

ModelClass = TypeVar('ModelClass', bound=SQLModel)
class BaseCRUD(Generic[ModelClass]):
    """Simple class providing base CRUD operations on given Model"""
    db: Session
    model: Type[ModelClass]
    def __init__(self, model: Type[ModelClass], db: Session) -> None:
        """
        Class constructor
        Args:
            model: The model onto perform operations
            db: Database engine Session
        """
        ...
    
    def create(self, instance: SQLModel) -> Optional[SQLModel]:
        """
        Persists an item into the Database
        Args:
            instance: model to persist

        Returns:
            Optional[SQLModel]: the created instance itself

        """
        ...
    
    def get(self, *args: BinaryExpression, **kwargs: Any) -> Optional[ModelClass]:
        """
        Gets a single record from the database
        Args:
            *args: filter args
            **kwargs: filter args

        Returns:
            Optional[ModelClass]: the retrieved instance or None

        """
        ...
    
    def filter(self, offset: Optional[int] = ..., limit: Optional[int] = ..., *args: BinaryExpression, **kwargs: Any) -> List[Any]:
        """
        Gets one or more instances from the database, filtering them by one or more column
        Args:
            offset: specifies the point from where to start returning data
            limit: parameter that limits the number of results
            *args: filter args
            **kwargs: filter args

        Returns:
            List: List of retrieved items from the database

        """
        ...
    
    def get_all(self) -> Optional[List[ModelClass]]:
        """
        Gets all instances of given module from the Database
        Returns:
            List: List of all instances of that model in the database.
        """
        ...
    
    def update(self, instance: SQLModel) -> Optional[SQLModel]:
        """
        Updates a record into database. It is equal to create data process, so it will call that method
        Args:
            instance: the instance to update

        Returns:
            Optional[SQLModel]: the updated instance
        """
        ...
    
    def delete(self, instance: Type[ModelClass]) -> Type[ModelClass]:
        """
        Removes an instance from the database
        Args:
            instance: the instance to remove

        Returns:
            Type[ModelClass]: the instance removed
        """
        ...
    
    def bulk_create(self, instances: List[ModelClass]) -> List[ModelClass]:
        """
        Insert multiple instances in the database
        Args:
            instances: List of instances to be added into the Database

        Returns:
            List[ModelClass]: the inserted instances
        """
        ...
    


