"""
This type stub file was generated by pyright.
"""

'''
    feedgen.feed
    ~~~~~~~~~~~~

    :copyright: 2013-2020, Lars Kiesow <lkiesow@uos.de>

    :license: FreeBSD and LGPL, see license.* for more details.

'''
_feedgen_version = ...
class FeedGenerator:
    '''FeedGenerator for generating ATOM and RSS feeds.
    '''
    def __init__(self) -> None:
        ...
    
    def atom_str(self, pretty=..., extensions=..., encoding=..., xml_declaration=...):
        '''Generates an ATOM feed and returns the feed XML as string.

        :param pretty: If the feed should be split into multiple lines and
            properly indented.
        :param extensions: Enable or disable the loaded extensions for the xml
            generation (default: enabled).
        :param encoding: Encoding used in the  XML file (default: UTF-8).
        :param xml_declaration: If an XML declaration should be added to the
            output (Default: enabled).
        :returns: String representation of the ATOM feed.

        **Return type:** The return type may vary between different Python
        versions and your encoding parameters passed to this method. For
        details have a look at the `lxml documentation
        <https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring>`_
        '''
        ...
    
    def atom_file(self, filename, extensions=..., pretty=..., encoding=..., xml_declaration=...): # -> None:
        '''Generates an ATOM feed and write the resulting XML to a file.

        :param filename: Name of file to write or a file-like object or a URL.
        :param extensions: Enable or disable the loaded extensions for the xml
            generation (default: enabled).
        :param pretty: If the feed should be split into multiple lines and
            properly indented.
        :param encoding: Encoding used in the  XML file (default: UTF-8).
        :param xml_declaration: If an XML declaration should be added to the
            output (Default: enabled).
        '''
        ...
    
    def rss_str(self, pretty=..., extensions=..., encoding=..., xml_declaration=...):
        '''Generates an RSS feed and returns the feed XML as string.

        :param pretty: If the feed should be split into multiple lines and
            properly indented.
        :param extensions: Enable or disable the loaded extensions for the xml
            generation (default: enabled).
        :param encoding: Encoding used in the  XML file (default: UTF-8).
        :param xml_declaration: If an XML declaration should be added to the
            output (Default: enabled).
        :returns: String representation of the RSS feed.

        **Return type:** The return type may vary between different Python
        versions and your encoding parameters passed to this method. For
        details have a look at the `lxml documentation
        <https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring>`_
        '''
        ...
    
    def rss_file(self, filename, extensions=..., pretty=..., encoding=..., xml_declaration=...): # -> None:
        '''Generates an RSS feed and write the resulting XML to a file.

        :param filename: Name of file to write or a file-like object or a URL.
        :param extensions: Enable or disable the loaded extensions for the xml
            generation (default: enabled).
        :param pretty: If the feed should be split into multiple lines and
            properly indented.
        :param encoding: Encoding used in the  XML file (default: UTF-8).
        :param xml_declaration: If an XML declaration should be added to the
            output (Default: enabled).
        '''
        ...
    
    def title(self, title=...): # -> None:
        '''Get or set the title value of the feed. It should contain a human
        readable title for the feed. Often the same as the title of the
        associated website. Title is mandatory for both ATOM and RSS and should
        not be blank.

        :param title: The new title of the feed.
        :returns: The feeds title.
        '''
        ...
    
    def id(self, id=...): # -> None:
        '''Get or set the feed id which identifies the feed using a universally
        unique and permanent URI. If you have a long-term, renewable lease on
        your Internet domain name, then you can feel free to use your website's
        address. This field is for ATOM only. It is mandatory for ATOM.

        :param id: New Id of the ATOM feed.
        :returns: Id of the feed.
        '''
        ...
    
    def updated(self, updated=...): # -> datetime:
        '''Set or get the updated value which indicates the last time the feed
        was modified in a significant way.

        The value can either be a string which will automatically be parsed or
        a datetime.datetime object. In any case it is necessary that the value
        include timezone information.

        This will set both atom:updated and rss:lastBuildDate.

        Default value
            If not set, updated has as value the current date and time.

        :param updated: The modification date.
        :returns: Modification date as datetime.datetime
        '''
        ...
    
    def lastBuildDate(self, lastBuildDate=...): # -> datetime:
        '''Set or get the lastBuildDate value which indicates the last time the
        content of the channel changed.

        The value can either be a string which will automatically be parsed or
        a datetime.datetime object. In any case it is necessary that the value
        include timezone information.

        This will set both atom:updated and rss:lastBuildDate.

        Default value
            If not set, lastBuildDate has as value the current date and time.

        :param lastBuildDate: The modification date.
        :returns: Modification date as datetime.datetime
        '''
        ...
    
    def author(self, author=..., replace=..., **kwargs): # -> list[Unknown] | None:
        '''Get or set author data. An author element is a dictionary containing
        a name, an email address and a URI. Name is mandatory for ATOM, email
        is mandatory for RSS.

        This method can be called with:

        - the fields of an author as keyword arguments
        - the fields of an author as a dictionary
        - a list of dictionaries containing the author fields

        An author has the following fields:

        - *name* conveys a human-readable name for the person.
        - *uri* contains a home page for the person.
        - *email* contains an email address for the person.

        :param author:  Dictionary or list of dictionaries with author data.
        :param replace: Add or replace old data.
        :returns: List of authors as dictionaries.

        Example::

            >>> feedgen.author({'name':'John Doe', 'email':'jdoe@example.com'})
            [{'name':'John Doe','email':'jdoe@example.com'}]

            >>> feedgen.author([{'name':'Mr. X'},{'name':'Max'}])
            [{'name':'John Doe','email':'jdoe@example.com'},
                    {'name':'John Doe'}, {'name':'Max'}]

            >>> feedgen.author(name='John Doe', email='jdoe@example.com',
                               replace=True)
            [{'name':'John Doe','email':'jdoe@example.com'}]

        '''
        ...
    
    def link(self, link=..., replace=..., **kwargs): # -> list[Unknown] | None:
        '''Get or set link data. An link element is a dict with the fields
        href, rel, type, hreflang, title, and length. Href is mandatory for
        ATOM.

        This method can be called with:

        - the fields of a link as keyword arguments
        - the fields of a link as a dictionary
        - a list of dictionaries containing the link fields

        A link has the following fields:

        - *href* is the URI of the referenced resource (typically a Web page)
        - *rel* contains a single link relationship type. It can be a full URI,
          or one of the following predefined values (default=alternate):

            - *alternate* an alternate representation of the entry or feed, for
              example a permalink to the html version of the entry, or the
              front page of the weblog.
            - *enclosure* a related resource which is potentially large in size
              and might require special handling, for example an audio or video
              recording.
            - *related* an document related to the entry or feed.
            - *self* the feed itself.
            - *via* the source of the information provided in the entry.

        - *type* indicates the media type of the resource.
        - *hreflang* indicates the language of the referenced resource.
        - *title* human readable information about the link, typically for
          display purposes.
        - *length* the length of the resource, in bytes.

        RSS only supports one link with URL only.

        :param link:    Dict or list of dicts with data.
        :param replace: If old links are to be replaced (default: False)
        :returns:       Current set of link data

        Example::

            >>> feedgen.link( href='http://example.com/', rel='self')
            [{'href':'http://example.com/', 'rel':'self'}]

        '''
        ...
    
    def category(self, category=..., replace=..., **kwargs): # -> list[Unknown] | None:
        '''Get or set categories that the feed belongs to.

        This method can be called with:

        - the fields of a category as keyword arguments
        - the fields of a category as a dictionary
        - a list of dictionaries containing the category fields

        A categories has the following fields:

        - *term* identifies the category
        - *scheme* identifies the categorization scheme via a URI.
        - *label* provides a human-readable label for display

        If a label is present it is used for the RSS feeds. Otherwise the term
        is used. The scheme is used for the domain attribute in RSS.

        :param link:    Dict or list of dicts with data.
        :param replace: Add or replace old data.
        :returns: List of category data.
        '''
        ...
    
    def cloud(self, domain=..., port=..., path=..., registerProcedure=..., protocol=...): # -> dict[str, Unknown | None] | None:
        '''Set or get the cloud data of the feed. It is an RSS only attribute.
        It specifies a web service that supports the rssCloud interface which
        can be implemented in HTTP-POST, XML-RPC or SOAP 1.1.

        :param domain: The domain where the webservice can be found.
        :param port: The port the webservice listens to.
        :param path: The path of the webservice.
        :param registerProcedure: The procedure to call.
        :param protocol: Can be either HTTP-POST, XML-RPC or SOAP 1.1.
        :returns: Dictionary containing the cloud data.
        '''
        ...
    
    def contributor(self, contributor=..., replace=..., **kwargs): # -> list[Unknown] | None:
        '''Get or set the contributor data of the feed. This is an ATOM only
        value.

        This method can be called with:
        - the fields of an contributor as keyword arguments
        - the fields of an contributor as a dictionary
        - a list of dictionaries containing the contributor fields

        An contributor has the following fields:
        - *name* conveys a human-readable name for the person.
        - *uri* contains a home page for the person.
        - *email* contains an email address for the person.

        :param contributor: Dictionary or list of dictionaries with contributor
                            data.
        :param replace: Add or replace old data.
        :returns: List of contributors as dictionaries.
        '''
        ...
    
    def generator(self, generator=..., version=..., uri=...): # -> dict[str, Unknown] | dict[str, str]:
        '''Get or set the generator of the feed which identifies the software
        used to generate the feed, for debugging and other purposes. Both the
        uri and version attributes are optional and only available in the ATOM
        feed.

        :param generator: Software used to create the feed.
        :param version: Version of the software.
        :param uri: URI the software can be found.
        '''
        ...
    
    def icon(self, icon=...): # -> None:
        '''Get or set the icon of the feed which is a small image which
        provides iconic visual identification for the feed. Icons should be
        square. This is an ATOM only value.

        :param icon: URI of the feeds icon.
        :returns: URI of the feeds icon.
        '''
        ...
    
    def logo(self, logo=...): # -> None:
        '''Get or set the logo of the feed which is a larger image which
        provides visual identification for the feed. Images should be twice as
        wide as they are tall. This is an ATOM value but will also set the
        rss:image value.

        :param logo: Logo of the feed.
        :returns: Logo of the feed.
        '''
        ...
    
    def image(self, url=..., title=..., link=..., width=..., height=..., description=...): # -> dict[str, Unknown] | None:
        '''Set the image of the feed. This element is roughly equivalent to
        atom:logo.

        :param url: The URL of a GIF, JPEG or PNG image.
        :param title: Describes the image. The default value is the feeds
                      title.
        :param link: URL of the site the image will link to. The default is to
                     use the feeds first altertate link.
        :param width: Width of the image in pixel. The maximum is 144.
        :param height: The height of the image. The maximum is 400.
        :param description: Title of the link.
        :returns: Data of the image as dictionary.
        '''
        ...
    
    def rights(self, rights=...): # -> None:
        '''Get or set the rights value of the feed which conveys information
        about rights, e.g. copyrights, held in and over the feed. This ATOM
        value will also set rss:copyright.

        :param rights: Rights information of the feed.
        '''
        ...
    
    def copyright(self, copyright=...): # -> None:
        '''Get or set the copyright notice for content in the channel. This RSS
        value will also set the atom:rights value.

        :param copyright: The copyright notice.
        :returns: The copyright notice.
        '''
        ...
    
    def subtitle(self, subtitle=...): # -> None:
        '''Get or set the subtitle value of the cannel which contains a
        human-readable description or subtitle for the feed. This ATOM property
        will also set the value for rss:description.

        :param subtitle: The subtitle of the feed.
        :returns: The subtitle of the feed.
        '''
        ...
    
    def description(self, description=...): # -> None:
        '''Set and get the description of the feed. This is an RSS only element
        which is a phrase or sentence describing the channel. It is mandatory
        for RSS feeds. It is roughly the same as atom:subtitle. Thus setting
        this will also set atom:subtitle.

        :param description: Description of the channel.
        :returns: Description of the channel.

        '''
        ...
    
    def docs(self, docs=...): # -> str:
        '''Get or set the docs value of the feed. This is an RSS only value. It
        is a URL that points to the documentation for the format used in the
        RSS file. It is probably a pointer to [1]. It is for people who might
        stumble across an RSS file on a Web server 25 years from now and wonder
        what it is.

        [1]: http://www.rssboard.org/rss-specification

        :param docs: URL of the format documentation.
        :returns: URL of the format documentation.
        '''
        ...
    
    def language(self, language=...): # -> None:
        '''Get or set the language of the feed. It indicates the language the
        channel is written in. This allows aggregators to group all Italian
        language sites, for example, on a single page. This is an RSS only
        field.  However, this value will also be used to set the xml:lang
        property of the ATOM feed node.
        The value should be an IETF language tag.

        :param language: Language of the feed.
        :returns: Language of the feed.
        '''
        ...
    
    def managingEditor(self, managingEditor=...): # -> None:
        '''Set or get the value for managingEditor which is the email address
        for person responsible for editorial content.    This is a RSS only
        value.

        :param managingEditor: Email address of the managing editor.
        :returns: Email address of the managing editor.
        '''
        ...
    
    def pubDate(self, pubDate=...): # -> datetime | None:
        '''Set or get the publication date for the content in the channel. For
        example, the New York Times publishes on a daily basis, the publication
        date flips once every 24 hours. That's when the pubDate of the channel
        changes.

        The value can either be a string which will automatically be parsed or
        a datetime.datetime object. In any case it is necessary that the value
        include timezone information.

        This will set both atom:updated and rss:lastBuildDate.

        :param pubDate: The publication date.
        :returns: Publication date as datetime.datetime
        '''
        ...
    
    def rating(self, rating=...): # -> None:
        '''Set and get the PICS rating for the channel.    It is an RSS only
        value.
        '''
        ...
    
    def skipHours(self, hours=..., replace=...): # -> set[Unknown] | None:
        '''Set or get the value of skipHours, a hint for aggregators telling
        them which hours they can skip. This is an RSS only value.

        This method can be called with an hour or a list of hours. The hours
        are represented as integer values from 0 to 23.

        :param hours: List of hours the feedreaders should not check the feed.
        :param replace: Add or replace old data.
        :returns: List of hours the feedreaders should not check the feed.
        '''
        ...
    
    def skipDays(self, days=..., replace=...): # -> set[Unknown] | None:
        '''Set or get the value of skipDays, a hint for aggregators telling
        them which days they can skip This is an RSS only value.

        This method can be called with a day name or a list of day names. The
        days are represented as strings from 'Monday' to 'Sunday'.

        :param hours:   List of days the feedreaders should not check the feed.
        :param replace: Add or replace old data.
        :returns:       List of days the feedreaders should not check the feed.
        '''
        ...
    
    def textInput(self, title=..., description=..., name=..., link=...): # -> dict[Unknown, Unknown] | None:
        '''Get or set the value of textInput. This is an RSS only field.  The
        purpose of the <textInput> element is something of a mystery. You can
        use it to specify a search engine box. Or to allow a reader to provide
        feedback. Most aggregators ignore it.

        :param title: The label of the Submit button in the text input area.
        :param description: Explains the text input area.
        :param name: The name of the text object in the text input area.
        :param link: The URL of the CGI script that processes text input
                     requests.
        :returns: Dictionary containing textInput values.
        '''
        ...
    
    def ttl(self, ttl=...): # -> int | None:
        '''Get or set the ttl value. It is an RSS only element. ttl stands for
        time to live. It's a number of minutes that indicates how long a
        channel can be cached before refreshing from the source.

        :param ttl: Integer value indicating how long the channel may be
                    cached.
        :returns: Time to live.
        '''
        ...
    
    def webMaster(self, webMaster=...): # -> None:
        '''Get and set the value of webMaster, which represents the email
        address for the person responsible for technical issues relating to the
        feed.  This is an RSS only value.

        :param webMaster: Email address of the webmaster.
        :returns: Email address of the webmaster.
        '''
        ...
    
    def add_entry(self, feedEntry=..., order=...): # -> FeedEntry:
        '''This method will add a new entry to the feed. If the feedEntry
        argument is omittet a new Entry object is created automatically. This
        is the preferred way to add new entries to a feed.

        :param feedEntry: FeedEntry object to add.
        :param order: If `prepend` is chosen, the entry will be inserted
                      at the beginning of the feed. If `append` is chosen,
                      the entry will be appended to the feed.
                      (default: `prepend`).
        :returns: FeedEntry object created or passed to this function.

        Example::

            ...
            >>> entry = feedgen.add_entry()
            >>> entry.title('First feed entry')

        '''
        ...
    
    def add_item(self, item=...): # -> FeedEntry:
        '''This method will add a new item to the feed. If the item argument is
        omittet a new FeedEntry object is created automatically. This is just
        another name for add_entry(...)
        '''
        ...
    
    def entry(self, entry=..., replace=...): # -> list[Unknown]:
        '''Get or set feed entries. Use the add_entry() method instead to
        automatically create the FeedEntry objects.

        This method takes both a single FeedEntry object or a list of objects.

        :param entry: FeedEntry object or list of FeedEntry objects.
        :returns: List ob all feed entries.
        '''
        ...
    
    def item(self, item=..., replace=...): # -> list[Unknown]:
        '''Get or set feed items. This is just another name for entry(...)
        '''
        ...
    
    def remove_entry(self, entry): # -> None:
        '''Remove a single entry from the feed. This method accepts both the
        FeedEntry object to remove or the index of the entry as argument.

        :param entry: Entry or index of entry to remove.
        '''
        ...
    
    def remove_item(self, item): # -> None:
        '''Remove a single item from the feed. This is another name for
        remove_entry.
        '''
        ...
    
    def load_extension(self, name, atom=..., rss=...): # -> None:
        '''Load a specific extension by name.

        :param name: Name of the extension to load.
        :param atom: If the extension should be used for ATOM feeds.
        :param rss: If the extension should be used for RSS feeds.
        '''
        ...
    
    def register_extension(self, namespace, extension_class_feed=..., extension_class_entry=..., atom=..., rss=...): # -> None:
        '''Registers an extension by class.

        :param namespace: namespace for the extension
        :param extension_class_feed: Class of the feed extension to load.
        :param extension_class_entry: Class of the entry extension to load
        :param atom: If the extension should be used for ATOM feeds.
        :param rss: If the extension should be used for RSS feeds.
        '''
        ...
    


