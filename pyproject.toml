# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "youtube_rss"
version = "0.0.1"
description = "A python project created by Martokk."
readme = "README.md"
authors = ["v3services <25113632+martokk@users.noreply.github.com>"]
license = "MIT"
repository = "https://github.com/martokk/youtube_rss"
homepage = "https://github.com/martokk/youtube_rss"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  #! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
]

[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"youtube_rss" = "youtube_rss.__main__:app"

[tool.poetry.dependencies]
python = "^3.10"

loguru = "^0.6.0"

typer = {extras = ["all"], version = "^0.6.1"}
rich = "^12.6.0"
colorama = "^0.4.5"
fastapi = "^0.88.0"
uvicorn = "^0.20.0"
pyyaml = "^6.0"
python-dotenv = "^0.21.0"
yt-dlp = "^2022.11.11"
fastapi-utils = "^0.2.1"
httpx = "^0.23.1"
shortuuid = "^1.0.11"
sqlmodel = "^0.0.8"
wheel = "^0.38.1"
python-telegram-bot = "^20.0"
pyjwt = "^2.6.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
feedgen = "^0.9.0"
jinja2 = "^3.1.2"
python-multipart = "^0.0.5"
alembic = "^1.9.2"
asyncpg = "^0.27.0"


[tool.poetry.group.dev.dependencies]
bandit = "^1.7.1"
black = {version = "^22.3.0", allow-prereleases = true}
darglint = "^1.8.1"
flake8 = "^5.0.4"
isort = {extras = ["colors"], version = "^5.10.1"}
mypy = "^0.982"
mypy-extensions = "^0.4.3"
pre-commit = "^2.15.0"
pydocstyle = "^6.1.1"
pylint = "^2.11.1"
pytest = "^7.1.3"
pytest-mock = "^3.10.0"
pyupgrade = "^3.1.0"
safety = "^2.3.1"
coverage = "^6.1.2"
coverage-badge = "^1.1.0"
pytest-html = "^3.1.1"
pytest-cov = "^4.0.0"
trio = "^0.22.0"
pytest-asyncio = "^0.20.3"

[tool.black]
# https://github.com/psf/black
target-version = ["py310"]
line-length = 100
color = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
    | typings
    | migrations
)/
'''

[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = 310
line_length = 100

known_typing = ["typing", "typings", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true
skip = ["pyqt5_ui.py", "resources_rc.py"]
skip_glob = [".venv/*", "typings/*", "migrations/*"]

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = "3.10"
pretty = true
show_traceback = true
color_output = true
allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = false
exclude = "typings"

[[tool.mypy.overrides]]
module = "*.pyqt5_ui"
ignore_errors = true

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
python_files = ["tests.py", "test_*.py", "*_tests.py"]
asyncio_mode="auto"

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

[tool.coverage.run]
source = ["tests"]

[coverage.paths]
source = "youtube_rss"

[coverage.run]
branch = true

[coverage.report]
fail_under = 50
show_missing = true
